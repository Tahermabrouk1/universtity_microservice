services:
  # Discovery Service (Eureka)
  discovery-service:
    build:
      context: ./services/discovery
      dockerfile: Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_INSTANCE_HOSTNAME=discovery-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - EUREKA_CLIENT_REGISTER-WITH-EUREKA=false
      - EUREKA_CLIENT_FETCH-REGISTRY=false
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # Config Server
  config-server:
    build:
      context: ./services/config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=native,docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    volumes:
      - ./config-server/src/main/resources/configurations:/app/configurations
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # API Gateway
  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8222:8222"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - microservices-net
    depends_on:
      discovery-service:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8222/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # MySQL
  mysql:
    container_name: ms_mysql
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: univer
      MYSQL_DATABASE: msdb
      MYSQL_USER: univer
      MYSQL_PASSWORD: univer
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - microservices-net
    restart: unless-stopped

  # PhpMyAdmin
  phpmyadmin:
    container_name: ms_phpmyadmin
    image: phpmyadmin/phpmyadmin
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - "8082:80"
    networks:
      - microservices-net
    restart: unless-stopped

  # Zipkin
  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  # MongoDB
  mongodb:
    image: mongo
    container_name: mongo_db
    networks:
      - microservices-net
    ports:
      - "27017:27017"
    volumes:
      - mongo:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: univer
      MONGO_INITDB_ROOT_PASSWORD: univer
    restart: unless-stopped

  # Mongo Express
  mongo-express:
    image: mongo-express
    container_name: mongo_express
    depends_on:
      - mongodb
    networks:
      - microservices-net
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=univer
      - ME_CONFIG_MONGODB_ADMINPASSWORD=univer
      - ME_CONFIG_MONGODB_SERVER=mongo_db
      - ME_CONFIG_BASICAUTH=true
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=adminpassword
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=false

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - microservices-net

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - microservices-net
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms_kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  # MailDev
  mail-dev:
    container_name: ms-mail-dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - microservices-net
    restart: unless-stopped

  # H2 Database
  h2:
    image: oscarfonts/h2
    container_name: ms_h2
    networks:
      - microservices-net
    ports:
      - "1522:1521"   # Port JDBC
      - "81:81"       # Port Web
    environment:
      H2_OPTIONS: -ifNotExists
    restart: unless-stopped

networks:
  microservices-net:
    driver: bridge

volumes:
  mysql_data:
  mongo: